---
// Tienda e-commerce mejorada con filtros, login y pagos
---

<section class="py-12 bg-gradient-to-br from-orange-50 via-yellow-50 to-white min-h-screen">
  <div class="container mx-auto px-4 max-w-6xl">
    <!-- Header con login y admin -->
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-3xl md:text-5xl font-bold text-teal-800">Tienda para Niños</h1>
        <p class="text-lg text-teal-700 mt-2">Descubre materiales de enseñanza, libros, juegos y accesorios especialmente seleccionados para el aprendizaje y diversión de los niños.</p>
      </div>

    </div>

    <!-- Filtros de categorías -->
    <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
      <h2 class="text-xl font-bold text-teal-800 mb-4">Filtrar por Categoría</h2>
      <div class="flex flex-wrap gap-3">
        <button class="filter-btn active bg-orange-500 text-white px-4 py-2 rounded-lg font-semibold transition-all" data-category="todos">
          Todos
        </button>
        <button class="filter-btn bg-gray-200 hover:bg-orange-500 hover:text-white text-gray-700 px-4 py-2 rounded-lg font-semibold transition-all" data-category="libros">
          Libros
        </button>
        <button class="filter-btn bg-gray-200 hover:bg-orange-500 hover:text-white text-gray-700 px-4 py-2 rounded-lg font-semibold transition-all" data-category="juegos">
          Juegos
        </button>
        <button class="filter-btn bg-gray-200 hover:bg-orange-500 hover:text-white text-gray-700 px-4 py-2 rounded-lg font-semibold transition-all" data-category="accesorios">
          Accesorios
        </button>
        <button class="filter-btn bg-gray-200 hover:bg-orange-500 hover:text-white text-gray-700 px-4 py-2 rounded-lg font-semibold transition-all" data-category="materiales">
          Materiales
        </button>
      </div>
    </div>

    <!-- Productos -->
    <div id="store-products" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
      <!-- Los productos se renderizan por JS -->
    </div>

    <!-- Notificación de producto agregado -->
    <div id="notification" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50">
      <div class="flex items-center gap-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path d="M5 13l4 4L19 7"></path>
        </svg>
        <span id="notification-text">Producto agregado al carrito</span>
      </div>
    </div>

    <!-- Carrito -->
    <div class="fixed bottom-6 right-6 z-50">
      <button id="cart-btn" class="bg-orange-500 hover:bg-orange-600 text-white rounded-full w-16 h-16 flex items-center justify-center shadow-lg relative">
        <svg class="w-8 h-8" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 3h2l.4 2M7 13h10l4-8H5.4"/><circle cx="7" cy="21" r="1"/><circle cx="20" cy="21" r="1"/></svg>
        <span id="cart-count" class="absolute top-2 right-2 bg-white text-orange-600 rounded-full text-xs font-bold px-2 py-0.5">0</span>
      </button>
      <div id="cart-modal" class="hidden fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
        <div class="bg-white rounded-2xl shadow-2xl w-full max-w-md p-6 relative">
          <button id="close-cart" class="absolute top-4 right-4 text-gray-400 hover:text-orange-500">
            <svg class="w-7 h-7" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"/></svg>
          </button>
          <h2 class="text-2xl font-bold text-teal-800 mb-4">Tu Carrito</h2>
          <div id="cart-items" class="mb-4 max-h-60 overflow-y-auto">
            <!-- Items del carrito -->
          </div>
          <div class="flex justify-between items-center mb-4">
            <span class="text-lg font-semibold text-teal-700">Total:</span>
            <span id="cart-total" class="text-2xl font-bold text-orange-600">S/ 0.00</span>
          </div>
          <div class="flex gap-2 mb-4">
            <button id="whatsapp-btn" class="flex-1 bg-green-500 hover:bg-green-600 text-white py-3 rounded-lg font-semibold transition-all flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
              </svg>
              WhatsApp
            </button>
            <button id="yape-btn" class="flex-1 bg-purple-500 hover:bg-purple-600 text-white py-3 rounded-lg font-semibold transition-all flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
              Yape
            </button>
          </div>
          <button id="checkout-btn" class="w-full bg-gradient-to-r from-orange-400 to-orange-500 hover:from-orange-500 hover:to-orange-600 text-white py-3 rounded-lg font-semibold text-lg transition-all duration-300">Finalizar compra</button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
import { productService, cartService, authService, userService } from '../lib/database.js';

// Variables globales
let products = [];
let cart = [];
let currentUser = null;
let currentFilter = 'todos';

// Elementos del DOM
const storeProducts = document.getElementById('store-products');
const cartBtn = document.getElementById('cart-btn');
const cartModal = document.getElementById('cart-modal');
const closeCart = document.getElementById('close-cart');
const cartCount = document.getElementById('cart-count');
const cartItems = document.getElementById('cart-items');
const cartTotal = document.getElementById('cart-total');
const checkoutBtn = document.getElementById('checkout-btn');
const notification = document.getElementById('notification');
const notificationText = document.getElementById('notification-text');
const loginBtn = document.getElementById('login-btn');
const logoutBtn = document.getElementById('logout-btn');
const adminBtn = document.getElementById('admin-btn');
const userInfo = document.getElementById('user-info');
const userName = document.getElementById('user-name');
const filterBtns = document.querySelectorAll('.filter-btn');
const whatsappBtn = document.getElementById('whatsapp-btn');
const yapeBtn = document.getElementById('yape-btn');

// Función para mostrar notificación
function showNotification(message) {
  notificationText.textContent = message;
  notification.classList.remove('translate-x-full');
  setTimeout(() => {
    notification.classList.add('translate-x-full');
  }, 3000);
}

// Función para renderizar productos
function renderProducts(filteredProducts = products) {
  if (storeProducts) {
    storeProducts.innerHTML = filteredProducts.map(p => `
      <div class="bg-white rounded-2xl shadow-lg p-5 flex flex-col items-center text-center hover:shadow-2xl transition-all">
        <img src="${p.image}" alt="${p.name}" class="w-32 h-32 object-contain mb-4 rounded-xl bg-orange-50" />
        <h3 class="text-lg font-bold text-teal-800 mb-1">${p.name}</h3>
        <p class="text-sm text-teal-600 mb-2">${p.description}</p>
        <span class="text-xl font-bold text-orange-600 mb-3">S/ ${p.price.toFixed(2)}</span>
        <button class="add-to-cart bg-orange-500 hover:bg-orange-600 text-white px-6 py-2 rounded-lg font-semibold transition-all" data-id="${p.id}">Agregar al carrito</button>
      </div>
    `).join('');
  }
}

// Función para actualizar carrito
async function updateCart() {
  if (currentUser && currentUser.id) {
    try {
      cart = await cartService.getUserCart(currentUser.id);
      cartCount.textContent = cart.reduce((sum, item) => sum + item.quantity, 0);
      
      if (cart.length === 0) {
        cartItems.innerHTML = '<p class="text-teal-500">Tu carrito está vacío.</p>';
        cartTotal.textContent = 'S/ 0.00';
        return;
      }
      
      cartItems.innerHTML = cart.map(item => {
        const prod = item.products;
        return `
          <div class="flex items-center justify-between mb-3 bg-orange-50 rounded-lg p-2">
            <div class="flex items-center gap-3">
              <img src="${prod.image}" alt="${prod.name}" class="w-12 h-12 object-contain rounded" />
              <div>
                <div class="font-semibold text-teal-800">${prod.name}</div>
                <div class="text-xs text-teal-600">S/ ${prod.price.toFixed(2)} x ${item.quantity}</div>
              </div>
            </div>
            <div class="flex items-center gap-2">
              <button class="decrease-qty text-orange-500 text-xl font-bold" data-id="${item.id}">-</button>
              <span class="font-bold">${item.quantity}</span>
              <button class="increase-qty text-orange-500 text-xl font-bold" data-id="${item.id}">+</button>
              <button class="remove-item text-red-400 ml-2" data-id="${item.id}" title="Eliminar">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </div>
        `;
      }).join('');
      
      const total = cart.reduce((sum, item) => {
        const prod = item.products;
        return sum + prod.price * item.quantity;
      }, 0);
      cartTotal.textContent = `S/ ${total.toFixed(2)}`;
    } catch (error) {
      console.error('Error actualizando carrito:', error);
      cartItems.innerHTML = '<p class="text-red-500">Error al cargar el carrito.</p>';
    }
  } else {
    cart = [];
    cartCount.textContent = '0';
    cartItems.innerHTML = '<p class="text-teal-500">Inicia sesión para ver tu carrito.</p>';
    cartTotal.textContent = 'S/ 0.00';
  }
}

// Función para verificar usuario logueado
async function checkUser() {
  try {
    currentUser = await authService.getCurrentUser();
    if (currentUser) {
      loginBtn.classList.add('hidden');
      userInfo.classList.remove('hidden');
      userName.textContent = currentUser.user_metadata?.name || currentUser.email;
      
      // Verificar si es admin
      try {
        const userProfile = await userService.getUserById(currentUser.id);
        if (userProfile && userProfile.is_admin) {
          adminBtn.classList.remove('hidden');
        }
      } catch (error) {
        console.log('Usuario no encontrado en tabla users');
      }
      
      await updateCart();
    } else {
      loginBtn.classList.remove('hidden');
      userInfo.classList.add('hidden');
      adminBtn.classList.add('hidden');
      await updateCart();
    }
  } catch (error) {
    console.error('Error verificando usuario:', error);
    loginBtn.classList.remove('hidden');
    userInfo.classList.add('hidden');
    adminBtn.classList.add('hidden');
  }
}

// Función para filtrar productos
function filterProducts(category) {
  currentFilter = category;
  const filteredProducts = category === 'todos' ? products : products.filter(p => p.category === category);
  renderProducts(filteredProducts);
  
  // Actualizar botones de filtro
  filterBtns.forEach(btn => {
    if (btn.getAttribute('data-category') === category) {
      btn.classList.add('bg-orange-500', 'text-white');
      btn.classList.remove('bg-gray-200', 'text-gray-700');
    } else {
      btn.classList.remove('bg-orange-500', 'text-white');
      btn.classList.add('bg-gray-200', 'text-gray-700');
    }
  });
}

// Event Listeners
document.addEventListener('DOMContentLoaded', async () => {
  try {
    // Cargar productos desde Supabase
    products = await productService.getAllProducts();
    renderProducts();
    await checkUser();

    // Filtros
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const category = btn.getAttribute('data-category');
        filterProducts(category);
      });
    });

    // Agregar al carrito
    storeProducts.addEventListener('click', async (e) => {
      if (e.target.classList.contains('add-to-cart')) {
        if (!currentUser) {
          showNotification('Debes iniciar sesión para agregar productos al carrito');
          return;
        }
        
        const productId = parseInt(e.target.getAttribute('data-id'));
        try {
          await cartService.addToCart(currentUser.id, productId, 1);
          await updateCart();
          showNotification('¡Producto agregado al carrito!');
        } catch (error) {
          console.error('Error agregando al carrito:', error);
          showNotification('Error al agregar al carrito');
        }
      }
    });

    // Carrito modal
    cartBtn.addEventListener('click', () => {
      cartModal.classList.remove('hidden');
    });
    
    closeCart.addEventListener('click', () => {
      cartModal.classList.add('hidden');
    });
    
    cartModal.addEventListener('click', (e) => {
      if (e.target === cartModal) cartModal.classList.add('hidden');
    });

    // Cambiar cantidad o eliminar
    cartItems.addEventListener('click', async (e) => {
      const btn = e.target.closest('button');
      if (!btn) return;
      
      const cartItemId = parseInt(btn.getAttribute('data-id'));
      try {
        if (btn.classList.contains('increase-qty')) {
          const item = cart.find(i => i.id === cartItemId);
          await cartService.updateCartItemQuantity(cartItemId, item.quantity + 1);
        } else if (btn.classList.contains('decrease-qty')) {
          const item = cart.find(i => i.id === cartItemId);
          if (item.quantity > 1) {
            await cartService.updateCartItemQuantity(cartItemId, item.quantity - 1);
          }
        } else if (btn.classList.contains('remove-item')) {
          await cartService.removeFromCart(cartItemId);
        }
        await updateCart();
      } catch (error) {
        console.error('Error actualizando carrito:', error);
        showNotification('Error al actualizar el carrito');
      }
    });

    // Login/Logout
    loginBtn.addEventListener('click', () => {
      window.location.href = '/login';
    });
    
    logoutBtn.addEventListener('click', async () => {
      try {
        await authService.signOut();
        currentUser = null;
        await checkUser();
        window.location.href = '/tienda';
      } catch (error) {
        console.error('Error cerrando sesión:', error);
      }
    });

    // Admin panel
    adminBtn.addEventListener('click', () => {
      window.location.href = '/admin';
    });

    // WhatsApp
    whatsappBtn.addEventListener('click', () => {
      if (cart.length === 0) {
        showNotification('Tu carrito está vacío');
        return;
      }
      
      const total = cart.reduce((sum, item) => {
        const prod = item.products;
        return sum + prod.price * item.quantity;
      }, 0);
      
      const items = cart.map(item => {
        const prod = item.products;
        return `${prod.name} x${item.quantity} - S/${prod.price.toFixed(2)}`;
      }).join('\n');
      
      const message = `Hola! Quiero hacer un pedido:\n\n${items}\n\nTotal: S/${total.toFixed(2)}`;
      const whatsappUrl = `https://wa.me/51999999999?text=${encodeURIComponent(message)}`;
      window.open(whatsappUrl, '_blank');
    });

    // Yape
    yapeBtn.addEventListener('click', () => {
      if (cart.length === 0) {
        showNotification('Tu carrito está vacío');
        return;
      }
      
      const total = cart.reduce((sum, item) => {
        const prod = item.products;
        return sum + prod.price * item.quantity;
      }, 0);
      
      alert(`Para pagar con Yape:\n\nNúmero: 999-999-999\nMonto: S/${total.toFixed(2)}\n\nEnvía el comprobante por WhatsApp.`);
    });

    // Checkout
    checkoutBtn.addEventListener('click', () => {
      if (cart.length === 0) {
        showNotification('Tu carrito está vacío');
        return;
      }
      
      const total = cart.reduce((sum, item) => {
        const prod = item.products;
        return sum + prod.price * item.quantity;
      }, 0);
      
      alert(`Total a pagar: S/${total.toFixed(2)}\n\nSelecciona tu método de pago preferido.`);
    });

  } catch (error) {
    console.error('Error inicializando la tienda:', error);
  }
});
</script>

<style>
#cart-modal {
  animation: fadeIn 0.2s;
}
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
</style>
